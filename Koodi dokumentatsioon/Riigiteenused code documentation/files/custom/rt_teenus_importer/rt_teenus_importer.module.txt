<?php
/**
 * @file
 * Importer of services and terms from Riigiteenused API.
 */

/**
 * Term name.
 */
define('API_INSTITUTION_REQUEST_ARGUMENT', NULL);
/**
 * Full API URL.
 */
define('NODES_API_URI', 'api/private/' . urlencode(API_INSTITUTION_REQUEST_ARGUMENT));
/**
 * Full API URL.
 */
define('TERMS_API_URI', 'export/terms');

/**
 * Implements hook_menu().
 */
function rt_teenus_importer_menu() {
  $items['importer/teenused'] = array(
    'title' => 'Teenuse Importer',
    'description' => 'A form to mess around with.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rt_teenus_importer_form'),
    'access arguments' => array('Access administration menu'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Form for running import from API.
 *
 * @param array $form
 *   form array
 * @param array $form_state
 *   form state array
 *
 * @return array
 *   form with new elements
 */
function rt_teenus_importer_form($form, &$form_state) {
  $form['nodes_api_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Teenuste API url',
    '#size' => 60,
    '#required' => TRUE,
    '#default_value' => SERVICE_APPLICATION_URL . '/' . NODES_API_URI,
  );

  $form['terms_api_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Termide API url',
    '#size' => 60,
    '#required' => TRUE,
    '#default_value' => SERVICE_APPLICATION_URL . '/' . TERMS_API_URI,
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Synchronize services and taxonomies'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function rt_teenus_importer_form_submit($form, &$form_state) {
  if (!HOST_APPLICATION) {
    // Import terms.
    $terms_imported = _rt_teenus_importer_import_terms($form_state['values']['terms_api_url']);
    drupal_set_message(t('@terms terms are imported', array('@terms' => $terms_imported)));

    // Import nodes.
    $nodes_imported = _rt_teenus_importer_import_nodes($form_state['values']['nodes_api_url']);
    drupal_set_message(t('@nodes nodes are imported', array('@nodes' => $nodes_imported)));
  }
  else {
    drupal_set_message(t('On host application!'));
  }
}

/**
 * Implements hook_cron().
 */
function rt_teenus_importer_cron() {
  if (!HOST_APPLICATION) {
    if (date("H") == '01') {
      // Import terms.
      $terms_imported = _rt_teenus_importer_import_terms(SERVICE_APPLICATION_URL . '/' . TERMS_API_URI);
      watchdog('riigiteenused-importer', $terms_imported . ' terms are imported from URL ' . SERVICE_APPLICATION_URL . '/' . TERMS_API_URI);

      // Import nodes.
      $nodes_imported = _rt_teenus_importer_import_nodes(SERVICE_APPLICATION_URL . '/' . NODES_API_URI);
      watchdog('riigiteenused-importer', $nodes_imported . ' nodes are imported from URL ' . SERVICE_APPLICATION_URL . '/' . NODES_API_URI);
    }
    else {
      drupal_set_message(t('On host application!'));
      watchdog('riigiteenused-importer', 'On host application!');
    }
  }
}

/*
 * Utility functions.
 */

/**
 * Function executes terms import.
 *
 * @param string $url
 *   private API url
 *
 * @return int
 *   number of imported terms
 */
function _rt_teenus_importer_import_terms($url) {
  $json_response = drupal_http_request($url);
  $json_array = drupal_json_decode($json_response->data);

  $terms_counter = 0;
  if (is_array($json_array)) {
    foreach ($json_array as $taxonomy_machine_name => $terms_list) {
      if (is_array($terms_list)) {
        $taxonomy = taxonomy_vocabulary_machine_name_load($taxonomy_machine_name);
        $taxonomy_tree = taxonomy_get_tree($taxonomy->vid);
        foreach ($taxonomy_tree as $term) {
          taxonomy_term_delete($term->tid);
        }

        foreach ($terms_list as $old_tid => $term) {
          $parent = 0;
          if ($term['parents'][0] != '0') {
            $parent_term = taxonomy_get_term_by_name($terms_list[$term['parents'][0]]['name'], $taxonomy_machine_name);
            $parent = key($parent_term);
          }

          $new_term = new stdClass();
          $new_term->vid = $taxonomy->vid;
          $new_term->vocabulary_machine_name = $taxonomy_machine_name;
          $new_term->name = $term['name'];
          $new_term->description = $term['description'];
          $new_term->format = $term['format'];
          $new_term->weight = $term['weight'];
          $new_term->hweight = $term['hweight'];
          $new_term->hdepth = $term['hdepth'];
          $new_term->depth = $term['depth'];
          $new_term->parent = $parent;
          taxonomy_term_save($new_term);
          $terms_counter++;
        }
      }
    }
  }

  return $terms_counter;
}

/**
 * Function executes nodes import.
 *
 * @param string $url
 *   private API url
 *
 * @return int
 *   number of imported nodes
 */
function _rt_teenus_importer_import_nodes($url) {
  $json_response = drupal_http_request($url);
  $json_array = drupal_json_decode($json_response->data);
  return _rt_teenus_importer_create_nodes_from_json($json_array);
}


/**
 * Function saves received from API nodes.
 *
 * @param array $json_array
 *   list of services to save
 *
 * @return int
 *   number of imported nodes
 */
function _rt_teenus_importer_create_nodes_from_json($json_array) {
  $nodes_counter = 0;

  if (is_array($json_array)) {
    ini_set('max_execution_time', 0);
    // Remove all service before importing. It's much simpler rather then
    // update.
    $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', 'teenus', '=')
      ->execute();

    if ($result->rowCount() > 0) {
      while ($nid = $result->fetchField()) {
        node_delete($nid);
      }
    }

    foreach ($json_array as $teenus) {
      /*
       * NODE
       */
      $node = new stdClass();
      $node->title = $teenus['nimetus'];
      $node->type = 'teenus';
      $node->language = LANGUAGE_NONE;
      $node->uid = 1;

      // Teenuse osutaja.
      $node->field_t_ministeerium_private[LANGUAGE_NONE][0]['value'] = $teenus['ministeerium'] . '123';
      $node->field_t_allasutus_private[LANGUAGE_NONE][0]['value'] = $teenus['allasutus'];
      $node->field_t_allasutuse_reference[LANGUAGE_NONE][0]['tid']
        = key(taxonomy_get_term_by_name($teenus['allasutus'], 'valitsuse_puu'));
      if (!empty($teenus['osakondyksus'])) {
        $node->field_t_osakond_yksus[LANGUAGE_NONE][0]['value'] = $teenus['osakondyksus'];
      }
      if (!empty($teenus['lisainfo_osutaja'])) {
        $node->field_t_lisainfo_osutaja[LANGUAGE_NONE][0]['value'] = $teenus['lisainfo_osutaja'];
      }

      // Teenuse Ã¼ldandmed.
      if (!empty($teenus['eluarisyndmus'])) {
        $node->field_t_syndmus[LANGUAGE_NONE][0]['value'] = $teenus['eluarisyndmus'];
      }
      list($prefix, $id) = explode('-', $teenus['identifikaator']);
      $node->field_t_teenuse_prefix[LANGUAGE_NONE][0]['value'] = $prefix;
      $node->field_t_tunnus[LANGUAGE_NONE][0]['value'] = $id;
      $node->field_t_kirjeldus[LANGUAGE_NONE][0]['value'] = $teenus['kirjeldus'];
      $node->field_t_sihtgrupp[LANGUAGE_NONE][0]['value'] = $teenus['sihtgrupp'];
      $node->field_t_tegevusvaldkond[LANGUAGE_NONE][0]['tid']
        = key(taxonomy_get_term_by_name($teenus['tegevusvaldkond'], 'tegevusvaldkonnad'));

      $node->field_t_teenuse_tyyp[LANGUAGE_NONE][0]['tid']
        = key(taxonomy_get_term_by_name($teenus['teenusetyyp'], 'teenuse_tyybid'));;
      if (!empty($teenus['lisainfo_uldandmed'])) {
        $node->field_t_lisainfo_uldandmed[LANGUAGE_NONE][0]['value'] = $teenus['lisainfo_uldandmed'];
      }

      // Teenuse vastutaja.
      if (!empty($teenus['omanikunimi'])) {
        $node->field_t_vastutaja_nimi[LANGUAGE_NONE][0]['value'] = $teenus['omanikunimi'];
      }
      if (!empty($teenus['omanikuamet'])) {
        $node->field_t_vastutaja_ametinimetus[LANGUAGE_NONE][0]['value'] = $teenus['omanikuamet'];
      }
      if (!empty($teenus['omanikutelefon'])) {
        $node->field_t_vastutaja_telefon[LANGUAGE_NONE][0]['value'] = $teenus['omanikutelefon'];
      }
      if (!empty($teenus['omanikuemail'])) {
        $node->field_t_vastutaja_email[LANGUAGE_NONE][0]['email'] = $teenus['omanikuemail'];
      }
      if (!empty($teenus['lisainfo_vastutaja'])) {
        $node->field_field_t_lisainfo_vastutaja[LANGUAGE_NONE][0]['value'] = $teenus['lisainfo_vastutaja'];
      }

      // Lisainfo.
      $node->field_t_makse[LANGUAGE_NONE][0]['value'] = $teenus['makse'];
      $node->field_t_konfidentsiaalne_info[LANGUAGE_NONE][0]['value'] = $teenus['konfinfo'];
      if (!empty($teenus['eeltingimus'])) {
        $node->field_t_eeltingimused[LANGUAGE_NONE][0]['value'] = $teenus['eeltingimus'];
      }
      if (!empty($teenus['jareltingimus'])) {
        $node->field_t_jareltingimused[LANGUAGE_NONE][0]['value'] = $teenus['jareltingimus'];
      }
      if (!empty($teenus['seotuddokumendid'])) {
        $node->field_t_seotud_dokumendid[LANGUAGE_NONE][0]['value'] = $teenus['seotuddokumendid'];
      }
      $node->field_t_teenuse_seisund[LANGUAGE_NONE][0]['value'] = $teenus['seisund'];
      if (!empty($teenus['muudatustvajav'])) {
        $node->field_t_muudatus_vajav[LANGUAGE_NONE][0]['value'] = $teenus['muudatustvajav'];
      }
      if (!empty($teenus['aegumisekpv'])) {
        $node->field_t_teenuse_aegumise_kp[LANGUAGE_NONE][0]['value'] = $teenus['aegumisekpv'];
      }
      if (!empty($teenus['funktsioon'])) {
        $node->field_t_funktsioon[LANGUAGE_NONE][0]['value'] = $teenus['funktsioon'];
      }
      if (!empty($teenus['lisainfo'])) {
        $node->field_t_lisainfo[LANGUAGE_NONE][0]['value'] = $teenus['lisainfo'];
      }
      for ($i = 0; $i < count($teenus['regulatsioon']); $i++) {
        $node->field_t_regulatsioon[LANGUAGE_NONE][$i]['url'] = $teenus['regulatsioon'][$i];
      }

      if (!empty($teenus['osutatud_teenuste_arv'])) {
        $node->field_t_osutatud_teenuste_arv[LANGUAGE_NONE][0]['value'] = $teenus['osutatud_teenuste_arv'];
      }
      if (!empty($teenus['rahulolu'])) {
        $node->field_t_rahulolu[LANGUAGE_NONE][0]['value'] = $teenus['rahulolu'];
      }
      if (!empty($teenus['maksumus'])) {
        $node->field_t_maksumus[LANGUAGE_NONE][0]['value'] = $teenus['maksumus'];
      }
      if (!empty($teenus['kliendihaldus_koormus'])) {
        $node->field_t_kliendihaldus_koormus[LANGUAGE_NONE][0]['value'] = $teenus['kliendihaldus_koormus'];
      }

      $node = node_submit($node);
      node_save($node);

      /*
       * FIELD COLLECTIONS
       */
      if (!empty($teenus['teenuste_kanalid_ja_moodikud'])) {
        foreach ($teenus['teenuste_kanalid_ja_moodikud'] as $year_value => $measured_channels) {
          $year_term = taxonomy_get_term_by_name($year_value, 'mootmise_aastad');
          $year_field_collection_item
            = entity_create('field_collection_item', array('field_name' => 'field_c_mootmise_aasta'));
          if (!empty($year_term)) {
            $year_field_collection_item->field_fcf_mootmise_aasta[LANGUAGE_NONE][0]['tid'] = key($year_term);
          }
          $year_field_collection_item->setHostEntity('node', $node);
          $year_field_collection_item->save();
          if (is_array($measured_channels)) {
            foreach ($measured_channels as $channel_name => $measurements) {
              $channel_term = taxonomy_get_term_by_name($channel_name, 'kanaalide_struktuur');
              $channel_field_collection_item
                = entity_create('field_collection_item', array('field_name' => 'field_fcf_mootmise_kanal'));
              $channel_field_collection_item->setHostEntity('field_collection_item', $year_field_collection_item);
              if (!empty($channel_term)) {
                $channel_field_collection_item->field_fcf_kanal[LANGUAGE_NONE][0]['tid'] = key($channel_term);
              }
              if (!empty($measurements['osutamistearv'])) {
                $channel_field_collection_item->field_fcf_osutamiste_arv[LANGUAGE_NONE][0]['value'] = $measurements['osutamistearv'];
              }
              if (!empty($measurements['rahulolu'])) {
                $channel_field_collection_item->field_fcf_aasta_rahulolu[LANGUAGE_NONE][0]['value'] = $measurements['rahulolu'];
              }
              if (!empty($measurements['halduskulu'])) {
                $channel_field_collection_item->field_fcf_aasta_halduskulu[LANGUAGE_NONE][0]['value'] = $measurements['halduskulu'];
              }
              if (!empty($measurements['ajakulu'])) {
                $channel_field_collection_item->field_fcf_ajakulu_klientidele[LANGUAGE_NONE][0]['value'] = $measurements['ajakulu'];
              }
              if (!empty($measurements['link'])) {
                $channel_field_collection_item->field_fcf_viide_teenusele[LANGUAGE_NONE][0]['url'] = $measurements['link'];
              }
              $channel_field_collection_item->save();
            }
          }
        }
      }
      $nodes_counter++;
    }

    cache_clear_all();
  }

  return $nodes_counter;
}

