<?php
/**
 * @file
 * Module for additional actions with Teenus content type.
 *
 * - Teenus content type's edit form changes from hook_form_alter
 *   (see @rt_teenus_form_alter).
 * -- Predefining service prefix and id depending on service status
 *   (new or old).
 * -- Predefining service "Teenuse osutaja" block. Service ministry and
 *    institution are predefined depending on user's role. Ajax callbacks are
 *    also used here to set up prefix if government or ministry user filling the
 *    form (expected that this type users does't have institution defined in
 *    profile so prefix could't be predefined from the beginning).
 * - Additional Teenus edit form's validation.
 * -- Validating if passed service ID (prefix + number) is unique
 *   (see @rt_teenus_node_validate).
 * - Institution term reference field and Private ministry and institution
 *    fields are predefined (see @rt_teenus_node_prepare) or added after form
 *    is submitted (see @rt_teenus_node_presave).
 * - Utility functions and ajax callbacks.
 */

/*
 * Access control.
 * Defining who can modify service nodes.
 */

define('TEENUS_REALM', 'teenus');
define('TEENUS_DEFAULT_GRANT_ID', 1);
define('TEENUS_INSTITUTION_GRANT_ID_PREFIX', 2);
define('TEENUS_MINISTRY_GRANT_ID_PREFIX', 3);
define('TEENUS_GOVERNMENT_GRANT_ID', 4);

/**
 * Implements hook_menu().
 */
function rt_teenus_menu() {

  $items['redirect'] = array(
    'title' => 'User based redirect',
    'page callback' => 'user_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_grants().
 *
 * @see https://www.drupal.org/node/1260948
 * @see https://www.drupal.org/node/689458#comment-2497228
 */
function rt_teenus_node_grants($account, $op) {
  $grants[TEENUS_REALM] = array();

  $user_account = user_load($account->uid);
  $user_institution = field_get_items('user', $user_account, 'field_u_asutus');
  // 'Valitsuse tasemel administraator' role user.
  if (array_search(ROLE_VALITSUS, $account->roles)) {
    $grants[TEENUS_REALM] = array(TEENUS_GOVERNMENT_GRANT_ID);
  }
  // 'Ministeeriumi administraator' role user.
  elseif (array_search(ROLE_MINISTEERIUM, $account->roles)) {
    if (isset($user_institution[0]['tid']) && taxonomy_term_load($user_institution[0]['tid'])) {
      $institution_tid = $user_institution[0]['tid'];
      $parent_term = taxonomy_get_parents($institution_tid);
      // If institution selected for ministry administrator.
      if (empty($parent_term)) {
        $grants[TEENUS_REALM] = array(TEENUS_MINISTRY_GRANT_ID_PREFIX . $user_institution[0]['tid']);
      }
      else {
        $grants[TEENUS_REALM] = array(TEENUS_MINISTRY_GRANT_ID_PREFIX . key($parent_term));
      }
    }
    else {
      $grants[TEENUS_REALM] = array(TEENUS_DEFAULT_GRANT_ID);
    }
  }
  // 'Allasutuse administraator' role user.
  elseif (array_search(ROLE_ALLASUTUS, $account->roles)) {
    if (isset($user_institution[0]['tid']) && taxonomy_term_load($user_institution[0]['tid'])) {
      $grants[TEENUS_REALM] = array(TEENUS_INSTITUTION_GRANT_ID_PREFIX . $user_institution[0]['tid']);
    }
    else {
      $grants[TEENUS_REALM] = array(TEENUS_DEFAULT_GRANT_ID);
    }
  }
  else {
    $grants[TEENUS_REALM] = array(TEENUS_DEFAULT_GRANT_ID);
  }

  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function rt_teenus_node_access_records($node) {
  if ($node->type == 'teenus') {
    $grants = array();

    $service_institution = field_get_items('node', $node, 'field_t_allasutuse_reference');
    if (isset($service_institution[0]['tid']) && taxonomy_term_load($service_institution[0]['tid'])) {
      $institution_tid = $service_institution[0]['tid'];
      $parent_term = taxonomy_get_parents($institution_tid);

      // Only read rights for default grant.
      $grants[] = array(
        'realm' => TEENUS_REALM,
        'gid' => TEENUS_DEFAULT_GRANT_ID,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );

      // Government lvl user can access (edit, delete) all services.
      $grants[] = array(
        'realm' => TEENUS_REALM,
        'gid' => TEENUS_GOVERNMENT_GRANT_ID,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 0,
      );

      if (!empty($parent_term)) {
        // Access permissions for institution / ministry administrators.
        $grants[] = array(
          'realm' => TEENUS_REALM,
          'gid' => TEENUS_MINISTRY_GRANT_ID_PREFIX . key($parent_term),
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 0,
        );

        $grants[] = array(
          'realm' => TEENUS_REALM,
          'gid' => TEENUS_INSTITUTION_GRANT_ID_PREFIX . $institution_tid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 0,
        );
      }
      else {
        // Anyway add access for ministry administrators if ministry selected
        // as institution.
        $grants[] = array(
          'realm' => TEENUS_REALM,
          'gid' => TEENUS_MINISTRY_GRANT_ID_PREFIX . $institution_tid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 0,
        );

        drupal_set_message(t('Unsupported value of institution! Please select institution not ministry!'), 'error');
      }
    }

    return $grants;
  }
}

/**
 * Implements hook_form_alter().
 */
function rt_teenus_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'teenus_node_form') {
    $form['field_t_varu_title']['#access'] = FALSE;

    drupal_add_css('.group-t-statistika {display:none;}', array('type' => 'inline'));

    // Set custom wrapper for prefix field.
    $form['#id'] = 'teenus-node-form';

    /*
     * Hide some labels.
     */
    $form['field_c_mootmise_aasta'][LANGUAGE_NONE]['#title'] = '';
    $fc_items = $form['field_c_mootmise_aasta'][LANGUAGE_NONE];
    foreach ($fc_items as $i => $block) {
      if (is_numeric($i)) {
        $form['field_c_mootmise_aasta'][LANGUAGE_NONE][$i]['field_fcf_mootmise_aasta'][LANGUAGE_NONE]['#title'] = '';
        $form['field_c_mootmise_aasta'][LANGUAGE_NONE][$i]['field_fcf_mootmise_kanal'][LANGUAGE_NONE]['#title'] = '';
      }
    }

    /*
     * Show "Muudatuse vajaduse selgitus" textarea only if same radio button
     * is selected.
     */
    $form['field_t_muudatus_vajav'][LANGUAGE_NONE][0]['value']['#states'] = array(
      'visible' => array(
        ':input[name="field_t_teenuse_seisund[und]"]' => array('value' => 'Muudatust vajav'),
      ),
    );

    /*
     * Add groups for channels.
     */
    $tmp = $form['field_c_mootmise_aasta'][LANGUAGE_NONE];
    for ($i = 0; $i < count($tmp); $i++) {
      if (!isset($tmp[$i])) {
        continue;
      }
      for ($f = 0; $f < count($tmp[$i]['field_fcf_mootmise_kanal'][LANGUAGE_NONE]); $f++) {
        if (!isset($tmp[$i]['field_fcf_mootmise_kanal'][LANGUAGE_NONE][$f])) {
          continue;
        }

        $term_list = $tmp[$i]['field_fcf_mootmise_kanal'][LANGUAGE_NONE][$f]['field_fcf_kanal'][LANGUAGE_NONE]['#options'];
        $curr_group = '';
        foreach ($term_list as $key => $text) {
          if (!taxonomy_get_parents($key) && is_numeric($key)) {
            $options_one[$text] = array();
            $curr_group = $text;
          }
          else {
            $options_one[$curr_group][$key] = substr($text, 1);
          }
        }

        $tmp[$i]['field_fcf_mootmise_kanal'][LANGUAGE_NONE][$f]['field_fcf_kanal'][LANGUAGE_NONE]['#options'] = $options_one;
      }
    }
    $form['field_c_mootmise_aasta'][LANGUAGE_NONE] = $tmp;

    /*
     * Generate predefined service prefix and id.
     * Prefix will be changed to user's institution service automatically on
     * node editing. All user should have institution defined.
     */
    if ($service_id_set = _rt_teenus_get_service_id()) {
      $old_id = $form['field_t_tunnus'][LANGUAGE_NONE][0]['value']['#default_value'];

      // Change prefix always.
      $form['field_t_teenuse_prefix'][LANGUAGE_NONE][0]['value']['#default_value']
        = $service_id_set['prefix'];
      $form['field_t_teenuse_prefix']['#disabled'] = TRUE;
      // ID should be the same, but also possible to change it manually.
      $form['field_t_tunnus'][LANGUAGE_NONE][0]['value']['#default_value']
        = !empty($old_id) ? $old_id : $service_id_set['id'];
    }

    /*
     * Predefine "Teenuse osutaja" block, depending on institution defined
     * in user's profile.
     */
    if ($user = user_load($form['uid']['#value'])) {
      $ministry_or_institution_tid
        = isset($user->field_u_asutus[LANGUAGE_NONE]) ? $user->field_u_asutus[LANGUAGE_NONE][0]['tid'] : NULL;
      // No worries if term not loaded (in case of NULL), it will be controlled
      // later.
      $mi_term = taxonomy_term_load($ministry_or_institution_tid);

      $mi_parent_term = FALSE;
      $mi_term_parent_ref = taxonomy_get_parents($ministry_or_institution_tid);
      if (!empty($mi_term_parent_ref)) {
        $mi_parent_term = array_values($mi_term_parent_ref);
        $mi_parent_term = $mi_parent_term[0];
      }

      // 'Valitsuse tasemel administraator' role user.
      if (array_search(ROLE_VALITSUS, $user->roles)) {
        // Hide private ministry and institution field.
        $form['field_t_ministeerium_private']['#access'] = FALSE;
        $form['field_t_allasutus_private']['#access'] = FALSE;

        /*
         * Add option groups for "Allasutuse reference" dropdown.
         */
        $term_list = $form['field_t_allasutuse_reference'][LANGUAGE_NONE]['#options'];
        $curr_group = '';
        foreach ($term_list as $key => $text) {
          if (!taxonomy_get_parents($key) && is_numeric($key)) {
            $options[$text] = array();
            $curr_group = $text;
          }
          else {
            $options[$curr_group][$key] = substr($text, 1);
          }
        }
        $form['field_t_allasutuse_reference'][LANGUAGE_NONE]['#options'] = $options;

        // Set service prefix by selected institution.
        $form['field_t_allasutuse_reference'][LANGUAGE_NONE]['#ajax']['callback'] = '_rt_teenus_institution_selected_callback';
        $form['field_t_allasutuse_reference'][LANGUAGE_NONE]['#ajax']['wrapper'] = 'teenus-node-form';

        if (!empty($form_state['values']['field_t_allasutuse_reference'])) {
          $prefix = NULL;
          $selected_institution_term_tid
            = $form_state['values']['field_t_allasutuse_reference'][LANGUAGE_NONE][0]['tid'];

          if ($selected_institution_term = taxonomy_term_load($selected_institution_term_tid)) {
            $prefix = $selected_institution_term->field_allasutuse_prefix[LANGUAGE_NONE][0]['value'];
            $service_id_hard_set = _rt_teenus_get_service_id($prefix);

            $form['field_t_teenuse_prefix'][LANGUAGE_NONE][0]['value']['#value'] = $service_id_hard_set['prefix'];
            $form['field_t_tunnus'][LANGUAGE_NONE][0]['value']['#value'] = $service_id_hard_set['id'];
          }
        }
      }
      // 'Ministeeriumi administraator' role user.
      elseif (array_search(ROLE_MINISTEERIUM, $user->roles)) {
        // Use parent ministry term if institution selected for ministry
        // administrator.
        $ministry_term = $mi_parent_term ? $mi_parent_term : $mi_term;
        if ($ministry_term) {
          // Hide field_t_allasutuse_reference field.
          $form['field_t_allasutuse_reference']['#access'] = FALSE;

          // Disable ministry field and set default value from user profile.
          $form['field_t_ministeerium_private']['#disabled'] = TRUE;
          $form['field_t_ministeerium_private'][LANGUAGE_NONE][0]['value']['#default_value']
            = $ministry_term->name;
          $form['field_t_ministeerium_private'][LANGUAGE_NONE][0]['value']['#value']
            = $ministry_term->name;

          // Get user's ministry institutions into options array.
          $ministry_services_options = array();
          $ministry_services_ref = taxonomy_get_children($ministry_term->tid);
          if (!empty($ministry_services_ref)) {
            foreach ($ministry_services_ref as $tid => $object) {
              $ministry_services_options[$object->name] = $object->name;
            }
          }

          // Change type of institution input field to select and set found
          // institutions options as values.
          $form['field_t_allasutus_private'][LANGUAGE_NONE][0]['value']['#type'] = 'select';
          $form['field_t_allasutus_private'][LANGUAGE_NONE][0]['value']['#options']
            = $ministry_services_options;
          unset($form['field_t_allasutus_private'][LANGUAGE_NONE][0]['value']['#size']);
          // Set default value for institution select list if ministry admin
          // have institution defined.
          if ($mi_parent_term && $mi_term) {
            $form['field_t_allasutus_private'][LANGUAGE_NONE][0]['value']['#default_value']
              = $mi_term->name;
          }

          // Set service prefix by selected institution.
          $form['field_t_allasutus_private'][LANGUAGE_NONE][0]['value']['#ajax']['callback']
            = '_rt_teenus_institution_selected_callback';
          $form['field_t_allasutus_private'][LANGUAGE_NONE][0]['value']['#ajax']['wrapper']
            = 'teenus-node-form';
          if (!empty($form_state['values']['field_t_allasutus_private'])) {
            $prefix = NULL;
            $selected_institution_term_name
              = $form_state['values']['field_t_allasutus_private'][LANGUAGE_NONE][0]['value'];

            if ($selected_institution_term = taxonomy_get_term_by_name($selected_institution_term_name, 'valitsuse_puu')) {
              $selected_institution_term
                = $selected_institution_term[key($selected_institution_term)];
              $prefix
                = $selected_institution_term->field_allasutuse_prefix[LANGUAGE_NONE][0]['value'];
              $service_id_hard_set = _rt_teenus_get_service_id($prefix);

              $form['field_t_teenuse_prefix'][LANGUAGE_NONE][0]['value']['#value']
                = $service_id_hard_set['prefix'];
              $form['field_t_tunnus'][LANGUAGE_NONE][0]['value']['#value']
                = $service_id_hard_set['id'];
            }
          }
        }
        else {
          drupal_set_message(t('User ministry not found: @tid', array('@tid' => $ministry_or_institution_tid)), 'error');
        }
      }
      // 'Allasutuse administraator' role user.
      else {
        if ($mi_term && $mi_parent_term) {
          $form['field_t_allasutuse_reference']['#access'] = FALSE;

          // Both ministry and institution fields are disabled and provided
          // with default values from user profile.
          $form['field_t_ministeerium_private']['#disabled'] = TRUE;
          $form['field_t_ministeerium_private'][LANGUAGE_NONE][0]['value']['#default_value']
            = $mi_parent_term ? $mi_parent_term->name : '';
          $form['field_t_ministeerium_private'][LANGUAGE_NONE][0]['value']['#value']
            = $mi_parent_term ? $mi_parent_term->name : '';

          $form['field_t_allasutus_private']['#disabled'] = TRUE;
          $form['field_t_allasutus_private'][LANGUAGE_NONE][0]['value']['#default_value']
            = $mi_term->name;
          $form['field_t_allasutus_private'][LANGUAGE_NONE][0]['value']['#value']
            = $mi_term->name;
        }
        else {
          drupal_set_message(t('One of the Allasutus administrator user term is not setted!'), 'error');
        }
      }
    }
    else {
      drupal_set_message(t('Unable to load user profile: @uid', array('@uid' => $form['uid']['#value'])), 'error');
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function rt_teenus_node_validate($node, $form, &$form_state) {
  if ($node->type == 'teenus') {
    /*
     * Check if this combination of prefix and id was already used.
     */
    $query = db_select('node', 'n');
    $query->join('field_data_field_t_teenuse_prefix', 'p', 'p.entity_id = n.nid');
    $query->join('field_data_field_t_tunnus', 'i', 'i.entity_id = n.nid');
    $query->fields('i', array('field_t_tunnus_value'));
    $query->condition('n.type', 'teenus');
    $query->condition('p.field_t_teenuse_prefix_value', $form_state['values']['field_t_teenuse_prefix'][LANGUAGE_NONE][0]['value']);
    $query->condition('i.field_t_tunnus_value', $form_state['values']['field_t_tunnus'][LANGUAGE_NONE][0]['value']);
    if (!is_null($node->nid)) {
      $query->condition('p.entity_id', $node->nid, '!=');
      $query->condition('i.entity_id', $node->nid, '!=');
    }
    if ($query->execute()->fetchField()) {
      form_set_error(
        'field_t_tunnus',
        t('Teenus id-ga "@id" juba eksisteerib!',
          array(
            '@id' => $form_state['values']['field_t_teenuse_prefix'][LANGUAGE_NONE][0]['value']
            . '_' . $form_state['values']['field_t_tunnus'][LANGUAGE_NONE][0]['value'],
          )
        )
      );
    }

    /*
     * At least one "Viide teenusele" URL should be set If at least one channel
     * static is entered.
     */
    $channel_measured = FALSE;
    $service_url_entered = FALSE;
    foreach ($form_state['values']['field_c_mootmise_aasta'][LANGUAGE_NONE] as $measured_year) {
      if (!is_array($measured_year)) {
        continue;
      }

      foreach ($measured_year['field_fcf_mootmise_kanal'][LANGUAGE_NONE] as $measured_channel) {
        if (is_array($measured_channel) && !is_null($measured_channel['field_fcf_kanal'][LANGUAGE_NONE][0]['tid'])) {
          $channel_measured = TRUE;
          $service_url_entered = !empty($measured_channel['field_fcf_viide_teenusele'][LANGUAGE_NONE][0]['url']);
        }
      }
    }
    if ($channel_measured && !$service_url_entered) {
      form_set_error('field_c_mootmise_aasta', t('Vähemalt üks "Veede teenusele" URL peab olema sisestatud!'));
    }

    /*
     * Custom error for Regulatsioon field. Default error text is not
     * informative enough.
     */
    if (empty($form_state['values']['field_t_regulatsioon'][LANGUAGE_NONE][0]['url'])) {
      form_set_error('field_t_regulatsioon', t('Regulatsioonile viide peab olema sisestatud!'));
    }

    /*
     * Validation of Phone field. Only numbers allowed.
     */
    if (!empty($form_state['values']['field_t_vastutaja_telefon'][LANGUAGE_NONE][0]['value'])
      && !preg_match('/^([0-9\(\)\/\+ \-]*)$/', $form_state['values']['field_t_vastutaja_telefon'][LANGUAGE_NONE][0]['value'])
    ) {
      form_set_error('field_t_vastutaja_telefon', t('Telefoninumber peaks olema ainult numbriline väärtus!'));
    }
  }
}

/**
 * Implements hook_node_prepare().
 */
function rt_teenus_node_prepare($node) {
  if ($node->type == 'teenus') {
    // Assign term reference value to the Allasutuse reference field if
    // correct institution term value was selected.
    if (isset($node->field_t_allasutus_private)) {
      if ($selected_institution_term = taxonomy_get_term_by_name($node->field_t_allasutus_private[LANGUAGE_NONE][0]['value'], 'valitsuse_puu')) {
        $node->field_t_allasutuse_reference[LANGUAGE_NONE][0]['tid']
          = key($selected_institution_term);
      }
      else {
        drupal_set_message(t('Unable to load selected institution term: @term', array('@term' => $node->field_t_allasutus_private[LANGUAGE_NONE][0]['value'])), 'error');
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function rt_teenus_node_presave($node) {
  if ($node->type == 'teenus') {
    $user = user_load($node->uid);
    /*
     * Assign term reference value to the Allasutuse reference field if correct
     * institution term value was selected.
     */
    if (array_search(ROLE_VALITSUS, $user->roles)) {
      if ($institution_term = taxonomy_term_load($node->field_t_allasutuse_reference[LANGUAGE_NONE][0]['tid'])) {
        $ministry_term_tid = taxonomy_get_parents($institution_term->tid);
        if (!empty($ministry_term_tid)) {
          $ministry_term_tid = array_values($ministry_term_tid);
          $ministry_term = $ministry_term_tid[0];

          $node->field_t_ministeerium_private[LANGUAGE_NONE][0]['value'] = $ministry_term->name;
          $node->field_t_allasutus_private[LANGUAGE_NONE][0]['value'] = $institution_term->name;
        }
        else {
          drupal_set_message(t('Allasutuse term-il ei ole leitud parent term-i: @term', array('@term' => $institution_term->name)), 'error');
        }
      }
      else {
        drupal_set_message(t('Teenuse allasutuse term reference on määramata: @node', array('@node' => $node->title)), 'error');
      }
    }
    // 'Ministeeriumi administraator' and 'Allasutuse administraator' role
    // users.
    else {
      if ($institution_term = taxonomy_get_term_by_name($node->field_t_allasutus_private[LANGUAGE_NONE][0]['value'], 'valitsuse_puu')) {
        $node->field_t_allasutuse_reference[LANGUAGE_NONE][0]['tid'] = key($institution_term);
      }
      else {
        drupal_set_message(t('Teenuse private allasutus on määramata: @node', array('@node' => $node->title)), 'error');
      }
    }

    /*
     * Un-publish node if status is 'Loomisel'
     */
    $node->status = $node->field_t_teenuse_seisund[LANGUAGE_NONE][0]['value'] == 'Loomisel' ? 0 : 1;
  }

}

/*
 * Ajax callback functions.
 */

/**
 * Callback function for selected institution.
 *
 * Will generate unique service id: prefix + id.
 *
 * @param array $form
 *   form array
 * @param array $form_state
 *   form state array
 *
 * @return array
 *   form array
 */
function _rt_teenus_institution_selected_callback($form, $form_state) {
  return $form;
}

/*
 * Utility functions.
 */

/**
 * Get sub institution prefix.
 *
 * Generates array with prefix and id of future service. This combination should
 * be unique.
 *
 * Prefix is defined on the sub institution's taxonomy term. Information about
 * which sub institution is requested from the current user's account.
 *
 * @param null|string $prefix
 *   if we already have prefix predefined and only need to get next id.
 *
 * @return bool|array
 *   return array with free service's prefix and id combination or FALSE if
 *   user's don't have sub institution defined.
 */
function _rt_teenus_get_service_id($prefix = NULL) {
  global $user;

  $service_id_set = FALSE;
  $user_data = user_load($user->uid);
  $sub_institution = field_get_items('user', $user_data, 'field_u_asutus');

  if (isset($sub_institution[0]['tid']) && !empty($sub_institution[0]['tid']) || !is_null($prefix)) {
    $institution_term = taxonomy_term_load($sub_institution[0]['tid']);
    $prefix_field
      = $institution_term ? field_get_items('taxonomy_term', $institution_term, 'field_allasutuse_prefix') : NULL;
    $prefix_value
      = is_null($prefix) ? (!empty($prefix_field[0]['value']) ? $prefix_field[0]['value'] : NULL) : $prefix;

    if (!is_null($prefix_value)) {
      $service_id_set['prefix'] = $prefix_value;
      $query = db_select('field_data_field_t_tunnus', 't');
      $query->join('field_data_field_t_teenuse_prefix', 'p', 'p.entity_id = t.entity_id');
      $query->addExpression('MAX(field_t_tunnus_value)');
      $query->condition('p.field_t_teenuse_prefix_value', is_null($prefix) ? $service_id_set['prefix'] : $prefix);
      $max_id = $query->execute()->fetchField();
      // ID is a string '001' format in database, so when we incrementing it
      // by 1 it became a number '2', so wee need to add leading zeros with
      // sprintf().
      $service_id_set['id'] = is_null($max_id) ? '001' : sprintf('%03d', $max_id + 1);
    }
    else {
      if (taxonomy_get_parents($institution_term->tid)) {
        drupal_set_message(t('Vaikimisi prefix on defineeritama allasutusele: @term', array('@term' => $institution_term->name)), 'error');
      }
    }
  }
  else {
    if (!array_search(ROLE_VALITSUS, $user->roles)) {
      drupal_set_message(t("User doesn't belong to any institution: @user. Please define service prefix and id.", array('@user' => $user->name)), 'error');
    }
  }

  return $service_id_set;
}

/**
 * Redirects user based on role.
 */
function user_redirect() {
  global $user;

  if (is_array($user->roles) && in_array('valitsuse tasemel administraator', array_values($user->roles))) {
    drupal_goto('statistika/valitsus');
  }
  elseif (is_array($user->roles) && in_array('ministeeriumi administraator', array_values($user->roles))) {
    drupal_goto('statistika/ministeerium');
  }
  elseif (is_array($user->roles) && in_array('allasutuse administraator', array_values($user->roles))) {
    drupal_goto('statistika/allasutus');
  }
  else {
    drupal_goto('user');
  }
}

/**
 * Print with pre.
 *
 * @param string $out
 *   output string
 */
function print_pre($out) {
  print '<pre>';
  print_r($out);
  print '</pre>';
}

